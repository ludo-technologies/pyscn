name: Python Package Release

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags
  workflow_dispatch:  # Allow manual trigger

jobs:
  build-wheels:
    name: Build wheels
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Linux builds
          - os: ubuntu-latest
            platform: linux-amd64
            goos: linux
            goarch: amd64
            wheel_platform: manylinux_2_17_x86_64
          
          # Windows builds
          - os: windows-latest
            platform: windows-amd64
            goos: windows
            goarch: amd64
            wheel_platform: win_amd64
          
          # macOS Intel
          - os: macos-13
            platform: darwin-amd64
            goos: darwin
            goarch: amd64
            wheel_platform: macosx_10_9_x86_64
            
          # macOS Apple Silicon
          - os: macos-14
            platform: darwin-arm64
            goos: darwin
            goarch: arm64
            wheel_platform: macosx_11_0_arm64
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      id: setup-go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
        cache: true
    
    # Windows-specific setup
    - name: Set up MSYS2 (Windows)
      if: matrix.os == 'windows-latest'
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        install: mingw-w64-x86_64-gcc mingw-w64-x86_64-pkg-config zip mingw-w64-x86_64-go
    
    - name: Install wheel verification tools
      run: |
        pip install --user twine
      shell: bash
    
    - name: Verify Go module
      run: |
        go mod download
        go mod verify
    
    - name: Build platform-specific wheel (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        python/scripts/build_platform_wheel.sh "${{ matrix.platform }}" "${{ matrix.wheel_platform }}"
      shell: bash
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CC: ${{ (matrix.goos == 'darwin' && matrix.goarch == 'arm64') && 'clang -target arm64-apple-macos11' || (matrix.goos == 'darwin' && matrix.goarch == 'amd64') && 'clang -target x86_64-apple-macos10.13' || '' }}
    
    - name: Build platform-specific wheel (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        echo "=== Environment Check ==="
        which go && go version
        which gcc && gcc --version | head -1
        which zip && zip --version | head -1
        
        echo "=== Starting Build ==="
        python/scripts/build_platform_wheel.sh "${{ matrix.platform }}" "${{ matrix.wheel_platform }}"
      shell: msys2 {0}
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
    
    - name: Verify wheels
      run: |
        # Check wheel metadata with twine
        python -m twine check dist/*.whl
        
        # Validate RECORD file format in each wheel
        echo "=== Validating RECORD files ==="
        for whl in dist/*.whl; do
          echo "Checking wheel: $whl"
          rec=$(unzip -Z1 "$whl" | grep -E '\.dist-info/RECORD$')
          echo "  RECORD path: $rec"
          
          # Extract and validate CSV format
          unzip -p "$whl" "$rec" | awk -F, '
            NF != 3 && $0 !~ /\.dist-info\/RECORD,,/ {
              print "❌ Invalid RECORD line: " $0
              print "   Expected 3 CSV fields, got " NF
              exit 1
            }
          '
          
          if [ $? -eq 0 ]; then
            echo "  ✅ RECORD file is valid CSV format"
          else
            echo "  ❌ RECORD file validation failed"
            exit 1
          fi
        done
        echo "=== All RECORD files validated successfully ==="
      shell: bash
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: wheels-${{ matrix.platform }}
        path: dist/*.whl
        retention-days: 7

  test-wheels:
    name: Test wheels
    needs: build-wheels
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.8', '3.13']
    
    steps:
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Download all wheels
      uses: actions/download-artifact@v4
      with:
        pattern: wheels-*
        path: wheels/
        merge-multiple: true
    
    - name: Test wheel installation
      shell: bash
      run: |
        # Find and install the appropriate wheel for this platform
        wheel_count=$(ls wheels/*.whl 2>/dev/null | wc -l)
        if [ $wheel_count -eq 0 ]; then
          echo "No wheels found, skipping test"
          exit 0
        fi
        
        echo "Available wheels:"
        ls -la wheels/
        
        # Try to install any wheel (the Python wrapper will check platform compatibility)
        if pip install wheels/pyscn-*.whl; then
          echo "Testing pyscn command..."
          if pyscn --version; then
            echo "✅ pyscn installation and execution successful!"
          elif pyscn --help >/dev/null 2>&1; then
            echo "✅ pyscn installation successful (version command failed but help works)"
          else
            echo "❌ pyscn command failed"
            exit 1
          fi
        else
          echo "⚠️  Wheel installation failed - likely unsupported platform combination"
        fi

  publish-pypi:
    name: Publish to PyPI
    needs: [build-wheels, test-wheels]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')  # Only on version tags
    
    environment:
      name: pypi
      url: https://pypi.org/p/pyscn
    
    permissions:
      contents: read  # For downloading artifacts
    
    steps:
    - name: Download all wheels
      uses: actions/download-artifact@v4
      with:
        pattern: wheels-*
        path: dist/
        merge-multiple: true
    
    - name: List wheels to publish
      run: ls -la dist/
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        packages-dir: dist/
        verbose: true

  publish-test-pypi:
    name: Publish to Test PyPI
    needs: [build-wheels, test-wheels]
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'  # Only on manual trigger
    
    environment:
      name: testpypi
      url: https://test.pypi.org/p/pyscn
    
    permissions:
      contents: read  # For downloading artifacts
    
    steps:
    - name: Download all wheels
      uses: actions/download-artifact@v4
      with:
        pattern: wheels-*
        path: dist/
        merge-multiple: true
    
    - name: List wheels to publish
      run: ls -la dist/
    
    - name: Publish to Test PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        packages-dir: dist/
        verbose: true

  create-github-release:
    name: Create GitHub Release
    needs: [build-wheels, test-wheels]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    permissions:
      contents: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all wheels
      uses: actions/download-artifact@v4
      with:
        pattern: wheels-*
        path: wheels/
        merge-multiple: true
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: wheels/*.whl
        generate_release_notes: true
        draft: false
        prerelease: false